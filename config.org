#+TITLE: Doom Emacs Configuration
#+AUTHOR: Ahsanur Rahman 
#+STARTUP: overview
#+PROPERTY: :lexical yes

* Initial Setup
** Lexical binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

** User Information
#+begin_src emacs-lisp
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")
#+end_src

** General Emacs Behaviour

#+begin_src emacs-lisp
;; Prefer y-or-n over yes-or-no
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* UI and Theming
** Theming
#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
#+end_src

** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 26.0))
(setq doom-unicode-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5))

(add-hook! 'doom-after-init-hook
  (defun +my/setup-font-faces ()
    "Configure font faces after Doom initialization."
    (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)))
#+end_src

** Lines
#+begin_src emacs-lisp
;; Line Spacing
(setq-default line-spacing 0.002)

;; Line Numbers
(add-hook! '(org-mode-hook term-mode-hook shell-mode-hook eshell-mode-hook)
           #'(lambda () (display-line-numbers-mode -1)))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-padding '(0 . 2))
(setq +doom-dashboard-banner-file "~/.config/doom/banner.png")
;;(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
;; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)
#+end_src

** Which Key
#+begin_src emacs-lisp
(after! which-key
  (setq which-key-popup-type 'minibuffer))
#+end_src

** Modeline
#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project
        doom-modeline-display-buffer-encoding nil
        doom-modeline-display-buffer-encoding nil))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Editor & Evil
** Core

#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t
      evil-want-fine-undo t)
#+end_src

** TODO Custom cursor colors from vanilla config
Change to catppuccin mocha theme
#+begin_src emacs-lisp
(setq evil-normal-state-cursor '(box "#fab387")  ;; Catppuccin Mocha Peach
      evil-insert-state-cursor '(bar "#f38ba8")  ;; Catppuccin Mocha Red
      evil-visual-state-cursor '(hollow "#fab387")) ;; Catppuccin Mocha Peach
#+end_src

** Use jk to escape insert mode

#+begin_src emacs-lisp
(use-package! evil-escape
  :hook (evil-mode . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.2)
  (evil-escape-excluded-modes '(dired-mode)))
#+end_src

** Visual feedback for yank/change operations

#+begin_src emacs-lisp
(use-package! evil-goggles
  :hook (evil-mode . evil-goggles-mode)
  :custom (evil-goggles-duration 0.1))
#+end_src

** Move by visual lines, not logical lines

#+begin_src emacs-lisp
(map! :map evil-normal-state-map
      "j" #'evil-next-visual-line
      "k" #'evil-previous-visual-line)
#+end_src

* Completion
** Vertico
#+begin_src emacs-lisp
(after! vertico
  (setq vertico-count 10
        vertico-cycle t))
#+end_src

** Consult
#+begin_src emacs-lisp
(after! consult
  ;; Use fd and rg for faster searching, from vanilla config
  (setq consult-find-args "fd --hidden --strip-cwd --type f --color=never"
        consult-ripgrep-args "rg --null --line-buffered --color=never --smart-case --no-heading --line-number --hidden --glob '!.git/'"))
#+end_src

** Consult-Yasnippet
#+begin_src emacs-lisp
(use-package! consult-yasnippet
  :after (consult yasnippet)
  :config
  (setq consult-yasnippet-category-icon-alist
        '((t . "¬ª")
          ("Emacs Lisp" . "Œª")
          ("Text" . "¬∂")
          ("Org" . "‚òÖ")
          ("Python" . "üêç"))))

(map! :leader
      :desc "Search snippets" "s y" #'consult-yasnippet)
#+end_src

* File Management
** Dired
#+begin_src emacs-lisp
(after! dired
  ;; Omit files like in the vanilla config
  (setq dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$")
  (setq dired-listing-switches "-agho --group-directories-first"))
#+end_src

** Dirvish

#+begin_src emacs-lisp
(after! dirvish
  ;; Set quick access directories from vanilla config
  (setq dirvish-quick-access-entries
        '(("h" "~/" "Home")
          ("d" "~/Downloads/" "Downloads")
          ("D" "~/Documents/" "Documents")
          ("p" "~/Projects/" "Projects")
          ("/" "/" "Root")))
  (setq dirvish-attributes '(nerd-icons file-time file-size collapse subtree-state vc-state)))
#+end_src

* Org Mode
** Fonts Setup
#+begin_src emacs-lisp
(defun ar/org-font-setup ()
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "JetBrainsMono Nerd Font" :weight 'bold :height (cdr face) :slant 'unspecified))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-tag nil :foreground nil :inherit '(shadow fixed-pitch) :weight 'bold)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Core
#+begin_src emacs-lisp
(setq org-directory "~/org"
      org-ellipsis " ÔÖâ"
      org-startup-with-inline-images t
      org-image-actual-width 600
      org-archive-location "archive/Archive_%s::"
      org-auto-align-tags nil) ; org-modern handles this better

(defun ar/org-setup-hook ()
  "Modes to enable on org-mode start"
  (org-indent-mode)
  (visual-line-mode)
  (+org-pretty-mode)
  (ar/org-font-setup))

(add-hook! org-mode #'ar/org-setup-hook)
#+end_src

** TODO Reverse TAB behavior
TAB was changed to toggle only the visibility state of the current subtree, rather than cycle through it recursively. This can be reversed with:
#+begin_src emacs-lisp
;; (after! evil-org
;;   (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src

** Org Structure Templates
#+begin_src emacs-lisp
(use-package! org-tempo
  :after org
  :config
  (setq org-src-window-setup 'split-window-below
        org-src-fontify-natively t
        org-src-tab-acts-natively t)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

** Visual Fill Column
To center org text
#+begin_src emacs-lisp
(use-package! visual-fill-column
  :hook (org-mode . visual-fill-column-mode)
  :custom
  (visual-fill-column-width 100)
  (visual-fill-column-center-text t))
#+end_src

** Prettier pop-up for capture templates
#+begin_src emacs-lisp
(setf (alist-get 'height +org-capture-frame-parameters) 15)
#+end_src

** Org TODO Keywords

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "‚òõ TODO(t)" "‚ö° NEXT(n)" "üîÑ PROG(p)" "‚è≥ WAIT(w@/!)" "|" "‚úÖ DONE(d!)" "‚ùå CANCELLED(c@)")
          (sequence "üéØ GOAL(G)" "üöÄ ACTIVE(A)" "‚è∏ PAUSED(x)" "|" "üèÜ ACHIEVED(a)" "üö´ DROPPED(X)")))
  (setq org-todo-keyword-faces
        '(("‚òõ TODO" . (:foreground "#f38ba8" :weight bold))
          ("‚ö° NEXT" . (:foreground "#fab387" :weight bold))
          ("üîÑ PROG" . (:foreground "#89b4fa" :weight bold))
          ("‚è≥ WAIT" . (:foreground "#f9e2af" :weight bold))
          ("‚úÖ DONE" . (:foreground "#a6e3a1" :weight bold))
          ("‚ùå CANCELLED" . (:foreground "#cdd6f4" :weight bold))
          ("üéØ GOAL" . (:foreground "#b4befe" :weight bold))
          ("üöÄ ACTIVE" . (:foreground "#74c7ce" :weight bold))
          ("‚è∏ PAUSED" . (:foreground "#9399b2" :weight bold))
          ("üèÜ ACHIEVED" . (:foreground "#a6e3a1" :weight bold))
          ("üö´ DROPPED" . (:foreground "#585b70" :weight bold)))))
#+end_src

** Org Modern
#+begin_src emacs-lisp
;; Visual enhancements for Org
(after! org-modern
  (setq org-modern-star '("‚óâ" "‚óã" "‚óà" "‚óá" "‚óÜ" "‚ñ∑")
        org-modern-hide-stars "¬∑ "
        org-modern-list '((43 . "‚û§") (45 . "‚Äì") (42 . "‚Ä¢"))
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.1
        org-modern-block-name '(("src" "¬ª" "¬´") ("example" "¬ª" "¬´") ("quote" "‚ùù" "‚ùû"))
        ;; Style tags with a subtle box, inspired by Doom Emacs.
        org-modern-tag-faces `((:foreground ,(face-attribute 'default :foreground) :weight bold :box (:line-width (1 . -1) :color "#45475a")))))
#+end_src

** Org Appear
#+begin_src emacs-lisp
(after! org-appear
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t))
#+end_src

** Org Fragtog
#+begin_src emacs-lisp
(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src

** Org Capture

#+begin_src emacs-lisp
(after! org-capture
  (setq org-capture-templates
        (doct `(;; Main Capture Options
                ("Task" :keys "t"
                 :icon ("nf-oct-tasklist" :set "octicon" :color "red")
                 :file "inbox.org"
                 :headline "Tasks"
                 :template ("* ‚òõ TODO %?"
                            "  :PROPERTIES:"
                            "  :CREATED: %U"
                            "  :END:"))
                ("Note" :keys "n"
                 :icon ("nf-fa-sticky_note" :set "faicon" :color "yellow")
                 :file "inbox.org"
                 :headline "Notes"
                 :template ("* %? :note:"
                            "  :PROPERTIES:"
                            "  :CREATED: %U"
                            "  :END:"))
                ("Journal" :keys "j"
                 :icon ("nf-fa-calendar" :set "faicon" :color "pink")
                 :file "journal.org"
                 :datetree t
                 :template ("* %U %?"))
                ("Meeting" :keys "m"
                 :icon ("nf-mdi-account_group" :set "mdicon" :color "blue")
                 :file "inbox.org"
                 :headline "Meetings"
                 :template ("* Meeting: %? :meeting:"
                            "  :PROPERTIES:"
                            "  :CREATED: %U"
                            "  :ATTENDEES:"
                            "  :END:"
                            "** Agenda"
                            "** Notes"
                            "** Action Items"))
                ;; Long-term Planning
                ("Project" :keys "p"
                 :icon ("nf-oct-repo" :set "octicon" :color "green")
                 :file "projects.org"
                 :headline "Projects"
                 :template ("* üìã PLAN %? :project:"
                            "  :PROPERTIES:"
                            "  :CREATED: %U"
                            "  :GOAL:"
                            "  :DEADLINE:"
                            "  :END:"
                            "** Goals"
                            "** Tasks"
                            "*** ‚òõ TODO Define project scope"
                            "** Resources"
                            "** Notes"))
                ("Book" :keys "b"
                 :icon ("nf-mdi-book_open_page_variant" :set "mdicon" :color "orange")
                 :file "reading.org"
                 :headline "Reading List"
                 :template ("* %? :book:read:"
                            "  :PROPERTIES:"
                            "  :CREATED: %U"
                            "  :AUTHOR:"
                            "  :GENRE:"
                            "  :RATING:"
                            "  :END:"
                            "** Summary"
                            "** Key Takeaways"
                            "** Quotes"))
                ("Goal" :keys "g"
                 :icon ("nf-mdi-flag_checkered" :set "mdicon" :color "purple")
                 :file "goals.org"
                 :headline "Goals"
                 :template ("* üéØ GOAL %? :goal:"
                            "  DEADLINE: %(org-read-date nil nil \"+1y\")"
                            "  :PROPERTIES:"
                            "  :CREATED: %U"
                            "  :END:"
                            "** Why this goal?"
                            "** Success criteria"
                            "** Action steps"
                            "*** ‚òõ TODO Break down into smaller tasks"))
                ;; Protocol links
                ("Protocol" :keys "P"
                 :icon ("nf-fa-link" :set "faicon" :color "blue")
                 :file "Notes.org"
                 :template ("* ‚òõ TODO %^{Title}"
                            "Source: %u"
                            "#+BEGIN_QUOTE"
                            "%i"
                            "#+END_QUOTE"
                            "%?"))))))
#+end_src

** Org Roam

#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-directory (expand-file-name "roam" org-directory))
  (setq org-roam-db-location (expand-file-name ".org-roam.db" org-roam-directory))

  (setq org-roam-node-display-template
        (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag)))

  ;; Configure the backlinks buffer to open on the right, like in vanilla config
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; Hook to update modification times, keeping the graph fresh
  (defun +my/org-roam-update-modified-timestamp ()
    "Update modified timestamp in org-roam files before saving."
    (when (and (eq major-mode 'org-mode) (org-roam-file-p))
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward "^#\\+modified:" nil t)
          (delete-region (point) (line-end-position))
          (insert (format " %s" (format-time-string "[%Y-%m-%d %a %H:%M]")))))))
  (add-hook 'before-save-hook #'+my/org-roam-update-modified-timestamp)
  (setq org-roam-dailies-directory "daily/"))

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil)) ; Set to `t` to open UI on startup
#+end_src

** Org Agenda with Super Agenda

#+begin_src emacs-lisp
(after! org-agenda
  (setq org-agenda-files (list org-directory (expand-file-name "roam" org-directory)))
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator 'hr
        org-agenda-compact-blocks t)
  (org-super-agenda-mode))

;; The powerful agenda "dashboard" from vanilla config
(setq org-agenda-custom-commands
      '(("o" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 7)
                      (org-agenda-overriding-header "üìÖ Agenda")))
          (todo "‚ö° NEXT" ((org-agenda-overriding-header "‚ö° Next Tasks")))
          (tags-todo "project/üöÄ ACTIVE" ((org-agenda-overriding-header "üöÄ Active Projects")))
          (tags-todo "+PRIORITY=\"A\"" ((org-agenda-overriding-header "üî• High Priority")))
          (todo "‚è≥ WAIT" ((org-agenda-overriding-header "‚è≥ Waiting On")))
          (tags-todo "+habit" ((org-agenda-overriding-header "üîÑ Habits")))
          (stuck "" ((org-agenda-overriding-header "üö´ Stuck Projects")))))

        ("p" "Projects Overview"
         ((tags "project" ((org-agenda-overriding-header "üìã All Projects")))))

        ("g" "Goals Review"
         ((tags-todo "goal" ((org-agenda-overriding-header "üéØ Goals")))))))

(setq org-super-agenda-groups
      '((:name "üî• Overdue" :deadline past)
        (:name "üìÖ Today" :time-grid t :scheduled today)
        (:name "‚ö° Next" :todo "‚ö° NEXT")
        (:name "üî¥ Important" :priority "A")
        (:name "üöÄ Active Projects" :tag "project" :todo "ACTIVE")
        (:name "üéØ Goals" :tag "goal")
        (:name "üîÑ Habits" :tag "habit")
        (:name "‚è≥ Waiting" :todo "WAIT")
        (:discard (:anything t))))
#+end_src

** Disable flyspell for org headlines
#+begin_src emacs-lisp
;; Disable flyspell spell checking for org headlines
(after! org
  (defun +my/org-mode-flyspell-verify ()
    "Custom org-mode flyspell verification function.
    Calls the original org-mode-flyspell-verify but additionally
    skips spell checking on org headlines."
    (and (org-mode-flyspell-verify)  ; Call original function first
         (not (org-at-heading-p))))   ; Skip if we're on a headline

  ;; Override the flyspell mode predicate for org-mode
  (put 'org-mode 'flyspell-mode-predicate '+my/org-mode-flyspell-verify))
#+end_src

** Mixed Pitch
#+begin_src emacs-lisp
(setq +zen-mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode rst-mode adoc-mode))

(dolist (hook +zen-mixed-pitch-modes)
  (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode))
#+end_src

** Super Agenda

#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands org-super-agenda-mode)
#+end_src

#+begin_src emacs-lisp
(after! org-agenda
  (let ((inhibit-message t))
    (org-super-agenda-mode)))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Assignments"
                           :tag "Assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "Issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Research"
                           :tag "Research"
                           :order 15)
                          (:name "To read"
                           :tag "Read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "University"
                           :tag "uni"
                           :order 32)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
#+end_src

* Magit
** Forge
#+begin_src emacs-lisp
(setq forge-owned-accounts '(("aahsnr")))
#+end_src

* Misc
** Cucumber

#+begin_src emacs-lisp
(use-package! feature-mode
  :mode "\\.feature$")
#+end_src

** Systemd

#+begin_src emacs-lisp
(use-package! systemd
  :mode "\\.service$")
#+end_src

** Jupyter

#+begin_src emacs-lisp
(with-eval-after-load 'ob-jupyter
  (org-babel-jupyter-aliases-from-kernelspecs))
#+end_src

** M-x
#+begin_src emacs-lisp
(map! :leader
      :desc "Open like spacemacs" "SPC" #'execute-extended-command)
#+end_src

** Smartparens
#+begin_src emacs-lisp
(after! smartparens
  ;; Enable show-pair mode for bracket highlighting
  (show-smartparens-global-mode 1)

  ;; Explicitly define smartparens highlighting faces for Catppuccin Mocha
  (custom-set-faces
   '(sp-show-pair-face ((t (:background "#6e6a86" :foreground "#cdd6f4" :underline nil))))
   '(sp-show-pair-match-face ((t (:background "#6e6a86" :foreground "#cdd6f4" :weight bold))))
   '(sp-show-pair-mismatch-face ((t (:background "#f38ba8" :foreground "#1e1e2e" :weight bold))))))
#+end_src
